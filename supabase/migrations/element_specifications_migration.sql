-- Migration: Add element specifications table for storing AI-generated design element specifications
-- Date: 2025-08-29
-- Description: Creates table for storing element specification data generated by AI analysis

-- Create element_specifications table
CREATE TABLE IF NOT EXISTS element_specifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL,
    brief_id UUID NOT NULL,
    concept_id UUID NOT NULL,
    reference_image_id UUID, -- Reference to the analyzed image
    specification_data JSONB NOT NULL, -- Complete AI response with background and elements
    ai_model_used TEXT DEFAULT 'gemini-2.5-pro',
    prompt_used TEXT NOT NULL,
    generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_element_specs_user_id ON element_specifications(user_id);
CREATE INDEX IF NOT EXISTS idx_element_specs_brief_id ON element_specifications(brief_id);
CREATE INDEX IF NOT EXISTS idx_element_specs_concept_id ON element_specifications(concept_id);
CREATE INDEX IF NOT EXISTS idx_element_specs_reference_image ON element_specifications(reference_image_id);
CREATE INDEX IF NOT EXISTS idx_element_specs_created_at ON element_specifications(created_at DESC);

-- Add composite index for common query patterns
CREATE INDEX IF NOT EXISTS idx_element_specs_user_concept ON element_specifications(user_id, concept_id);

-- Enable Row Level Security (RLS)
ALTER TABLE element_specifications ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Users can only access their own element specifications
CREATE POLICY "Users can view their own element specifications" 
    ON element_specifications FOR SELECT 
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own element specifications" 
    ON element_specifications FOR INSERT 
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own element specifications" 
    ON element_specifications FOR UPDATE 
    USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own element specifications" 
    ON element_specifications FOR DELETE 
    USING (auth.uid() = user_id);

-- Create trigger to auto-update updated_at column
CREATE OR REPLACE FUNCTION update_element_specs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_element_specifications_updated_at
    BEFORE UPDATE ON element_specifications
    FOR EACH ROW
    EXECUTE FUNCTION update_element_specs_updated_at();

-- Add foreign key relationships (optional, depends on existing schema)
-- ALTER TABLE element_specifications ADD CONSTRAINT fk_element_specs_reference_image 
--     FOREIGN KEY (reference_image_id) REFERENCES reference_images(id) ON DELETE SET NULL;